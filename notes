
- more examples
- readme
 - add marshal and unmarshal example

- UseTags in sen.Options

- decomposer
 - separate lists
 - prune fiels from fiel info

- Marshal for reflects
 - need a buildReflectJSON that take a reflect.Value instead of interface{}
  - stay with buildJSON for simple and reflect for structs
 - add benchmark for decompose
 - make alt.FieldInfo public along with fields
  - so it can be used in oj and sen for writing
 - public FieldInfo and Decomposer but not members except Nested and Fields
 - add method to get field value from a struct
 - add field type decomposer if not an interface
 - Key()
 - how to reduce the number of allocs?
  - reuse reflect.Value?
   - .SetPointer()
    - maybe need to have a vlaue of the correct type to start with
    (*[2]uintptr)(unsafe.Pointer(&v))[0] type ? *rtype (maybe a reflect.Type)
      var uint8Type = TypeOf(uint8(0)).(*rtype)
    (*[2]uintptr)(unsafe.Pointer(&v))[1] value

----------------

- option to detect duplicate keys or make part of validator
 - change stack to include array and map or maybe just map and nil means array
  - check performance hit
  - check added condition of whether keys should be checked. If too high then copy code
 - or separate stack in func for key maps along with dip code

- regex op =~
  - /^xyz&/
 - in addition to parse callback support chan for results
 - cmd/oj
  - read args from file (SEN format)
   - also check ~/.oj.fin or ~/.oj - graphql emacs mode works well
  - palette in cfg file
  - build or restructure json
   - use a template based approach along with JSONPath
- advanced ops
 - in - a in [1,2,3]
 - exists, empty, or has
 - size or length - [?(@.x size > 3)] or [?(size @.x > 3)]
-------------

- Match a JavaScript regular expression. For example, [?(@.description =~ /cat.*/i)]
- Exists syntax? [?(@.x exists)]
